@model Dictionary<string, Dictionary<string, (decimal?, string)>>
@if (Model != null && Model.Any())
{
    <section class="bg-orange-100 border-l-4 border-orange-700 p-5 rounded-lg shadow pt-10 w-full md:w-[75%]">
        <div class="flex justify-between items-center mb-4">
            <section class="bg-orange-100 w-full max-w-3xl mx-auto text-center">
            <h1 class="text-2xl font-semibold text-orange-700">Shopping List Draft</h1> 
        </div>
        <form asp-controller="ShoppingList" asp-action="Save">
        @Html.AntiForgeryToken()
        @foreach (var category in Model)
        {
            <div>
                <h2 class="text-xl font-semibold mb-3 text-orange-700 mt-4">
                    @* Capitalise firs tletter of the categories.  *@
                    @char.ToUpper(category.Key[0])@category.Key.Substring(1) 
                </h2>
                <ul class="space-y-2">
                    @foreach (var ingredient in category.Value)
                    {
                        <input type="hidden" name="Categories" value="@category.Key"/>
                <li class="flex items-center px-3 py-2 border-b-2 border-orange-700 transition">
                    <label class="flex items-center w-full justify-between cursor-pointer select-none text-gray-700 text-md sm:text-base transition">
                    <div class = "flex items-center">
                        <input type="checkbox" name="SelectedIngredients" value="@ingredient.Key" class="hidden peer ingredient-checkbox" />
                        <span class="relative w-5 h-5 rounded-full border-2 border-orange-700 peer-checked:bg-orange-700 transition flex-shrink-0  "></span>
                            
                        <input class="ml-3 font-medium peer-checked:line-through peer-checked:underline peer-checked:text-gray-500 bg-orange-100" type="text" name="IngredientNames" readonly value="@ingredient.Key" />
                    </div>
                        <div class="flex items-right space-x-1">
                            <strong>
                                <input type="number" name="IngredientQuantities" data-original="@ingredient.Value.Item1.ToString()" value="@ingredient.Value.Item1.ToString()" class="ingredient-quantity no-spin items-right w-16 text-center bg-orange-100 focus:outline-none
                                            focus:ring-2 focus:ring-orange-400 focus:border-orange-400 border-2 border-orange-700 rounded-md"/>
                                    <input class=" w-6 -mr-6 font-medium bg-orange-100" name="IngredientUnits" type="text" readonly value="@ingredient.Value.Item2"/>
                                    
                            </strong>
                    </div>
                    </label>
                </li>
                    }
                </ul>
            </div>
        }
        <button type="submit" class="mt-5 inline-block bg-orange-700 hover:bg-orange-600 text-white sm:text-sm md:text-md lg:text-md font-medium px-8 py-2 rounded-full transition">Save</button>
        </form>

    </section>
}

    @* <script>
      // For each checkbox, toggle its sibling quantity between original and 0
      document.querySelectorAll('.ingredient-checkbox').forEach(cb => {
        const li = cb.closest('li');
        const qty = li.querySelector('.ingredient-quantity');
        const original = qty.dataset.original;

        // Ensure initial sync in case DOM/state ever changes before submit
        const sync = () => { qty.value = cb.checked ? original : 0; };

        cb.addEventListener('change', sync);
        // Optional: run once on load (keeps value correct if markup ever renders unchecked)
        sync();
      });
    </script> *@