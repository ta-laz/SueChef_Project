@model Dictionary<string, Dictionary<string, (decimal?, string, bool)>>
<body class='bg-orange-50'></body>
<div class="justify-center p-3">
    <div class="text-center mb-10">
        <h1 class="text-3xl font-bold text-orange-700 mb-2 flex justify-center items-center mt-6">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-orange-700 animate-bounce" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 2a4 4 0 00-4 4H4a1 1 0 00-1 1v9a2 2 0 002 2h10a2 2 0 002-2V7a1 1 0 00-1-1h-2a4 4 0 00-4-4zM8 6a2 2 0 114 0H8z"/>
            </svg>Current Shopping List</h1>
        <p class="text-gray-600 text-sm text-center">Review your ingredients before you head to the shop — check off what you already have, dont forget to save!</p>

    </div>

    <div class="w-full max-w-4xl mx-auto">
    
        @if (Model != null && Model.Any())
{
    <section class="bg-orange-100 border-l-4 border-orange-700 p-5 rounded-lg shadow w-full md:w-[75%] mx-auto">
                <a asp-controller="Home" asp-action="Index" class="flex items-center justify-center w-9 h-9 rounded-full bg-orange-700 hover:bg-orange-600 transition shadow-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                        <path d="M12 3.172l8 6.364V20a1 1 0 0 1-1 1h-5v-6H10v6H5a1 1 0 0 1-1-1V9.536l8-6.364z"/>
                    </svg>
                </a>
    
        @* <div class="flex justify-between items-center mb-4">
            <section class="bg-orange-100 w-full max-w-3xl mx-auto text-center">
            <h1 class="text-2xl font-semibold text-orange-700">Meal Plan Name Shopping List?</h1> 
        </div> *@
        <form asp-controller="ShoppingList" asp-action="Update">
        @Html.AntiForgeryToken()
        @foreach (var category in Model)
        { if(category.Value.Values.All(c => c.Item3)){continue;}           
            <div class="bg-white backdrop-blur-sm border border-orange-300 rounded-xl shadow-lg hover:shadow-xl transition-shadow p-6 mt-4">
                <h2 class="text-xl font-semibold mb-3 text-orange-700 border-b pb-2 mb-3">
                    @char.ToUpper(category.Key[0])@category.Key.Substring(1) 
                </h2>
                
                
                <ul class="space-y-2">
                    @foreach (var ingredient in category.Value)
                    {
                    @if(ingredient.Value.Item3){continue;}
                        <input type="hidden" name="Categories" value="@category.Key"/>
                <li class="flex items-center px-3 py-2 border-b-2 border-orange-700 transition">
                    <label class="flex items-center w-full justify-between cursor-pointer select-none text-gray-700 text-md sm:text-base transition">
                    <div class = "flex items-center">
                        <input type="checkbox" name="PurchasedIngredients" value="@ingredient.Key" class="hidden peer ingredient-checkbox" />
                            <span
                                class="relative w-5 h-5 rounded-full border-2 border-orange-700 peer-checked:bg-orange-700 transition flex-shrink-0 
                                after:content-[''] after:absolute after:inset-0 after:flex after:items-center after:justify-center 
                                peer-checked:after:content-['✓'] peer-checked:after:text-white peer-checked:after:text-sm">
                            </span>
                            
                        <input class="focus:outline-none focus:ring-0 focus:border-inherit ml-3 font-medium peer-checked:line-through peer-checked:underline peer-checked:text-gray-500 bg-white" type="text" name="IngredientNames" readonly value="@ingredient.Key" />
                    </div>
                        <div class="flex items-right space-x-1">
                            <strong>
                                <input type="number" readonly name="IngredientQuantities" data-original="@(( (decimal)ingredient.Value.Item1 ).ToString("0"))" value="@(( (decimal)ingredient.Value.Item1 ).ToString("0"))" class="focus:outline-none focus:ring-0 focus:border-inherit text-right ingredient-quantity no-spin items-right w-16 text-center bg-white rounded-md"/>
                                    <input class="focus:outline-none focus:ring-0 focus:border-inherit w-6 -mr-6 font-medium bg-white" name="IngredientUnits" type="text" readonly value="@ingredient.Value.Item2"/>
                                    
                            </strong>
                    </div>
                    </label>
                </li>
                    }
                </ul>
            </div>
                
        }
            <div class="bg-white backdrop-blur-sm border border-orange-300 rounded-xl shadow-lg hover:shadow-xl transition-shadow p-6 mt-8">
                <h2 class="text-xl font-semibold mb-3 text-orange-700 border-b pb-2 mb-3"> Purchased</h2>
        @{
        bool anyPurchased = Model.Any(cat => cat.Value.Any(i => i.Value.Item3));
        }

    @if (!anyPurchased)
    {
            <div class="flex items-center text-left text-gray-600 font-semibold italic py-3 space-x-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-orange-700" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M7 18c-1.104 0-1.99.896-1.99 2S5.896 22 7 22s2-.896 2-2-.896-2-2-2zm10 0c-1.104 0-1.99.896-1.99 2S15.896 22 17 22s2-.896 2-2-.896-2-2-2zM7.16 14h9.52a2 2 0 001.96-1.59l1.24-6.21A1 1 0 0018.9 5H6.21l-.3-1.14A1 1 0 005 3H2v2h2.22l2.4 9.63A1.99 1.99 0 007.16 14z"/>
                </svg>
                <p>Nothing purchased yet, get to the shop!</p>
            </div>

    }
    else
    {
        @foreach (var category in Model)
        { 

            <ul class="space-y-2">
            @foreach (var ingredient in category.Value)
            {  @if(!ingredient.Value.Item3){continue;}  

                <input type="hidden" name="Categories" value="@category.Key"/>
                <li class="flex items-center px-3 py-2 border-b-2 border-orange-700 transition">
                    <label class="flex items-center w-full justify-between cursor-pointer select-none text-gray-700 text-md sm:text-base transition">
                    <div class = "flex items-center">
                        <input type="checkbox" name="UnpurchasedIngredients" value="@ingredient.Key" class="hidden peer ingredient-checkbox" checked/>
                            <span
                                class="relative w-5 h-5 rounded-full border-2 border-orange-700 peer-checked:bg-orange-700 transition flex-shrink-0 
                                after:content-[''] after:absolute after:inset-0 after:flex after:items-center after:justify-center 
                                peer-checked:after:content-['✓'] peer-checked:after:text-white peer-checked:after:text-sm">
                            </span>
                            
                        <input class="focus:outline-none focus:ring-0 focus:border-inherit ml-3 font-medium peer-checked:line-through peer-checked:underline peer-checked:text-gray-500 bg-white" type="text" name="PurchasedIngredientNames" readonly value="@ingredient.Key" />
                    </div>
                        <div class="flex items-right space-x-1">
                            <strong>
                                <input type="number" readonly name="PurchasedIngredientQuantities" data-original="@(( (decimal)ingredient.Value.Item1 ).ToString("0"))" value="@(( (decimal)ingredient.Value.Item1 ).ToString("0"))"
 class="focus:outline-none focus:ring-0 focus:border-inherit text-right ingredient-quantity no-spin items-right w-16 text-center bg-white rounded-md"/>
                                    <input class="focus:outline-none focus:ring-0 focus:border-inherit w-6 -mr-6 font-medium bg-white" name="IngredientUnits" type="text" readonly value="@ingredient.Value.Item2"/>
                                    
                            </strong>
                    </div>
                    </label>
                </li>
            }
            </ul>
        }
    }       </div>

        <div class="fixed bottom-5 left-1/2 transform -translate-x-1/2">
        <button type="submit" class="bg-orange-700 hover:bg-orange-600 text-white font-medium px-8 py-3 rounded-full shadow-md transition duration-300 ease-in-out">Save Shopping List!</button>
        </div>
        </form>
    </section>
        <div style="height: 100px;"></div>
    
}
        else
        {
            <div class="bg-orange-100 border-l-4 border-orange-700 p-5 rounded-lg shadow text-center max-w-2xl mx-auto">
                <h2 class="text-xl font-semibold text-orange-700 mb-3">No ingredients found!</h2>
                <p class="text-gray-600">Your shopping list is currently empty. Try adding some meals to your plan first.</p>
            </div>
        }     
    </div>
</div>


    <script>
      // For each checkbox, toggle its sibling quantity between original and 0
      document.querySelectorAll('.ingredient-checkbox').forEach(cb => {
        const li = cb.closest('li');
        const qty = li.querySelector('.ingredient-quantity');
        const original = qty.dataset.original;

        // Ensure initial sync in case DOM/state ever changes before submit
        const sync = () => { qty.value = cb.checked ? 0 : original; };

        cb.addEventListener('change', sync);
        // Optional: run once on load (keeps value correct if markup ever renders unchecked)
        sync();
      });
    </script>


