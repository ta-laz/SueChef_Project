@model SueChef.ViewModels.IndividualRecipePageViewModel
@using System.Diagnostics.Eventing.Reader
@using System.Timers
  <body class="bg-orange-50 text-gray-700">
    <main class="max-w-3xl mx-auto p-6 ">
      
      <!-- Header card containing image and title -->
      <header class="text-center space-y-2">
        <img src="@Model.IndividualRecipe.RecipePicturePath" alt="" class="w-full max-h-96 md:h-full  object-cover rounded-lg shadow"/>
            <h1 data-testid="recipe-title @Model.IndividualRecipe.Title" class="text-3xl font-bold mt-4 text-left">@Model.IndividualRecipe.Title</h1>
            <div class="md:w-[100%] mx-auto flex items-center justify-between gap-4 text-left text-lg text-gray-700">
              <h2 class="font-medium items-center">By @Model.IndividualRecipe.ChefName</h2>



              <!-- FAVOURITE / DROPDOWN BUTTON -->
               <div class="relative inline-flex rounded-lg shadow">

               <!-- Favourite Button SVG is a heart-->
                <form asp-action="ToggleFavourite" asp-controller="Favourites" method="post">
                  <input type="hidden" name="recipeId" value="@Model.IndividualRecipe.Id" />
                  <input type="hidden" name="servings" value="@Model.IndividualRecipe.Servings ?? 4" />
                  <button id="favourite_button" class="rounded-l-lg bg-orange-700 text-white px-4 py-2 h-10 w-20 flex items-center justify-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="@(Model.IsFavourited ? "white" : "none")" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                    </svg>
                  </button>
                </form>

                      
                <!-- Hidden Dropdown List -->
                <form asp-controller="MealPlan" asp-action="AddRecipe" method="post" id="saveMealPlanForm">
                  @Html.AntiForgeryToken()
                  <input type="hidden" name="recipeId" value="@Model.IndividualRecipe.Id" /> 
                  <div id="dropdownMenu" class="hidden absolute right-0 z-20 mt-10 bg-white rounded-lg shadow-lg w-full overflow-scroll scrollbar-hidden scrollbar-hover max-h-60 p-2">
                      
                      <ul id="mealPlansList">
                        @foreach (var plan in Model.UserMealPlans)
                        {
                            <li class="flex items-center px-3 py-2 border-b border-orange-200 last:border-b-0">
                                <label class="flex items-center gap-2 cursor-pointer w-full">
                                    <input type="checkbox" name="mealPlanIds" value="@plan.Id" class="hidden peer" />
                                    <span class="w-4 h-4 rounded-full border-2 border-orange-700 peer-checked:bg-orange-700 transition"></span>
                                    <span class="text-gray-700 text-sm truncate max-w-[80%]">@plan.MealPlanTitle</span>
                                </label>
                            </li>
                        }
                      </ul>
                  </div>

                  <!-- Save to Meal Plans button --> 
                  <button id="save_mealplan_button" class="hidden h-10 rounded-l-lg bg-orange-700 text-white px-3 py-2 hover:bg-orange-600 transition w-20 text-sm font-bold flex items-center justify-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                    </svg>
                    Save
                  </button>
                </form>
                  
              
              <!-- + Create New Meal Plan Button --> 
                <button type="button" id="showNewPlanForm" class="relative bg-orange-700 text-white border-l border-r border-orange-50 px-4 py-2 hover:bg-orange-600 transition h-10 w-20 text-sm font-bold flex items-center justify-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                </button>
                <!-- Input box, hidden by default -->
                  <div id="newMealPlanForm" class="hidden absolute right-0 z-20 mt-10 bg-white rounded-lg shadow-lg w-full p-2">
                    <form id="addNewMealPlan" asp-controller="MealPlan" asp-action="Create" class="flex flex-col gap-2" method="post">
                        @Html.AntiForgeryToken()
                        <input type="text" id="newMealPlanTitle" name="mealPlanTitle" placeholder="Create New Meal Plan"
                            class="flex-1 border border-orange-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-orange-400" />
                      <button type="button" id="saveNewMealPlan" class="text-sm text-right font-semibold text-orange-700 hover:underline text-left">
                        Save
                      </button>
                    </form>
                  </div>
                  <p id="newMealPlanError" class="text-xs text-red-600 hidden"></p>
            
              <!-- Dropdown Toggle -->
              <div class="relative w-20">
                <button  id="dropdownButton" data-logged-in="@Model.IsLoggedIn.ToString().ToLower()" class="text-white px-3 py-2 bg-orange-700 hover:bg-orange-600 transition h-full flex items-center justify-center rounded-r-lg w-20">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              </div>
            </div>
            </div>

        </header>
              

  <!-- MESSAGES: -->

  <div id="messageZone" class="h-9 flex items-center justify-end mt-3">
      @* Error Message for clicking toggle dropdown when not signed in *@
      <div id="loginError" class="hidden bg-red-50 border border-red-400 text-red-700 rounded mb-2 p-3 text-sm">
          You must be signed in to save recipes to your meal plans.
      </div>

      @* Error Message for clicking favourite dropdown when not signed in *@
      <div id="loginError2" class="hidden bg-red-50 border border-red-400 text-red-700 rounded mb-2 p-3 text-sm">
          You must be signed in to favourite recipes.
      </div>

      @* Error Message for clicking + dropdown when not signed in *@
      <div id="loginError3" class="hidden bg-red-50 border border-red-400 text-red-700 rounded mb-2 p-3 text-sm">
          You must be signed in to create meal plans.
      </div>

      @* Error Message for when user has no meal plans: *@
      <div id="noMealPlansError" class="hidden bg-red-50 border border-red-400 text-red-700 rounded mb-2 p-3 text-sm">
          You do not have any meal plans yet. Please create one first!
      </div>

      @* Error Message for when user has not selected any meal plans: *@
      <div id="noMealPlansSelectedError" class="hidden bg-red-50 border border-red-400 text-red-700 rounded mb-2 p-3 text-sm">
          No meal plan selected!
      </div>

      @* Success Message for Adding to Meal Plan *@
      <div class="flex justify-center mt-3">
        @if(TempData["Success"]!= null) 
          {
            <div class="alert-message flex items-center max-w-80 max-h-10 justify-center bg-green-100 border-l-4 border-green-600 text-green-800 p-4 rounded-md shadow mb-6">
                  <svg class="w-6 h-6 mr-2 text-green-600" fill="none" stroke="currentColor" stroke-width="2"viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round"d="M5 13l4 4L19 7" />
                  </svg>
                    <span class="font-medium truncate ">@Html.Raw(TempData["Success"])</span>
                </div>
          }
        
        @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-message bg-red-50 border border-red-400 text-red-700 rounded p-3 mb-4 text-sm">
                    @TempData["ErrorMessage"]
                </div>
            }
      </div>
  </div>
      
    <!-- RECIPE DETAILS SECTION: -->

    <div class="space-y-8">
      <!-- Recipe Description for boss sarah-->
        <section class="leading-relaxed text-gray-700">
          <p>@Model.IndividualRecipe.Description</p>
          </section>

            <!-- Recipe Specific details  -->

        <section class="border-l-4 border-orange-700 bg-orange-100 p-4 rounded-lg shadow flex flex-wrap items-center justify-between gap-3 text-sm sm:text-base">
          <!-- Difficulty -->
          <div class="flex items-center"><strong class="text-gray-700 mr-1">Difficulty:</strong><span class="@(Model.IndividualRecipe.DifficultyLevel == 1 ? "text-green-600 font-semibold" : Model.IndividualRecipe.DifficultyLevel == 2 ? "text-orange-500 font-semibold" : "text-red-600 font-semibold")">
        @(Model.IndividualRecipe.DifficultyLevel == 1 ? "Easy" : Model.IndividualRecipe.DifficultyLevel == 2 ? "Medium" : "Hard")</span>
          </div>
          <!-- Serves -->
          <div class="flex items-center"><strong class="text-gray-700 mr-1">Serves:</strong>
            <input type="number" data-testid="serving-input" id="serving" name="serving" min="1" max="12" value="4" class="w-16 text-center border border-orange-400 rounded-lg bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:border-orange-400 appearance-none" />
          </div>
          <!-- Rating -->
          <div class="flex items-center space-x-1"><strong class="text-gray-700">Rating:</strong><span class="text-yellow-400 text-lg leading-none">&#9733;</span>
            <p class="text-sm font-bold text-gray-700">@Model.IndividualRecipe.AverageRating</p><p class="text-sm font-medium text-gray-700 ">(@Model.IndividualRecipe.RatingCount)</p>
          </div>
          <!-- Prep Time in mins (do we want hours for longer?)-->
          <div class="flex items-center"><strong class="text-gray-700 mr-1">Prep Time:</strong><span>@Model.IndividualRecipe.PrepTime mins</span></div>
          <!-- Cook Time in mins (do we want hours for longer?) -->
          <div class="flex items-center"><strong class="text-gray-700 mr-1">Cook Time:</strong><span>@Model.IndividualRecipe.CookTime mins</span></div>
        </section>
              
        </section>

      <!-- Toggle buttons for ingredients and nutrition -->
      <section class="border-l-4 border-orange-700 bg-orange-100 p-4 rounded-lg shadow">
        <div class="inline-flex w-full rounded-lg overflow-hidden border-2 border-orange-700 mb-3">
          <button data-testid="recipe-tab-toggle" id="ingredientsButton" class="flex-1 py-2 bg-orange-700 text-white font-semibold ">Ingredients</button>
          <button data-testid="toggle-nutrition" id="nutritionButton" class="flex-1 py-2 bg-orange-100 text-orange-700 font-semibold border-l-2 border-orange-800">Nutrition</button>
        </div>
          
          <div id = "ingredientsToggle">       <!-- Displayed by default -->
          @foreach(var i in Model.IndividualRecipe.Ingredients)
          {
                <p data-testid="recipe-ingredients-@i.Name" class="tracking-wide p-2 mb-1 border-b-2 border-orange-700 ingredient" data-base-quantity="@i.Quantity" data-unit="@i.Unit"><span class="ingredient-quantity font-bold">@i.Quantity</span><strong>@i.Unit</strong> @i.Name </p> 
          }
          </div>
          <div id="nutritionToggle" style="display:none">       <!-- Hidden until toggled-->
              <p class="p-2 mb-1 border-b-2 border-orange-700 text-right italic">Nutrition: Per serving</p>
              <p data-testid="calories" class="p-2 mb-1 border-b-2 border-orange-700 font-b"><strong>Calories</strong> <span id="caloriesPerServing">@Model.IndividualRecipe.CaloriesPerServing.ToString("0") Kcal</span></p>
              <p data-testid="protein" class="p-2 mb-1 border-b-2 border-orange-700 "><strong>Protein</strong> <span id="proteinPerServing">@Model.IndividualRecipe.ProteinPerServing.ToString("0.0")g</span></p>
              <p data-testid="carbs" class="p-2 mb-1 border-b-2 border-orange-700 "><strong>Carbs</strong> <span id="carbsPerServing">@Model.IndividualRecipe.CarbsPerServing.ToString("0.0")g</span></p>
              <p data-testid="fats" class="p-2 mb-1 border-b-2 border-orange-700 "><strong>Fats</strong> <span id="fatsPerServing">@Model.IndividualRecipe.FatsPerServing.ToString("0.0")g</span></p>
          </div>
      </section>
      
        <!-- Logic to split the method and change it into step: 1, etc. -->
        @{
          var method = Model.IndividualRecipe.Method;
          var steps = method.Split(new[] {"; "}, StringSplitOptions.RemoveEmptyEntries);
          var counter = 1;
        }
        <section data-testid="method-steps">
          <h2 class="text-xl font-semibold mb-2">Method</h2>
          <ul class="list-decimal list-inside space-y-2 leading-relaxed text-gray-700">
          @foreach(var step in steps)
          { 
            <p class="">Step @counter: @(char.ToUpper(step.Trim()[0]) + step.Trim().Substring(1))</p>//Taking the first character, Capitalising, joining with remainder of the text 
            counter++;
          }
          </ul>
        </section>
      </div>

      <!-- RATE THIS RECIPE SECTION  -->
      <a id="rating-anchor"></a>
      <div class="text-center p-4 border-t">
      @if (TempData["SuccessMessage"] != null)
      {
        <div class="alert-message flex items-center justify-center bg-green-100 border-l-4 border-green-600 text-green-800 p-4 rounded-md shadow mb-6">
            <svg class="w-6 h-6 mr-2 text-green-600" fill="none" stroke="currentColor" stroke-width="2"viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round"d="M5 13l4 4L19 7" />
            </svg>
              <span data-testid="thanks-for-rating"class="font-medium">@TempData["SuccessMessage"]</span>
          </div>
      }

      @if(TempData["RatingErrorMessage"] != null){
        <div class="alert-message flex items-center justify-center bg-red-100 border-l-4 border-red-600 text-red-800 p-4 rounded-md shadow mb-6">
          <svg class="w-6 h-6 mr-2 text-red-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
            <span data-testid="sign-in-for-rating"class="font-medium">@TempData["RatingErrorMessage"]</span>
        </div>

        }
      
              <h2 data-testid="Rate-the-recipe"class="text-xl font-semibold mb-2">Rate this recipe</h2>
              
              <form method="post" action="@Url.Action("Rate", "RecipeDetails")" id="ratingForm">  
                  <input type="hidden" name="recipeId" value="@Model.IndividualRecipe.Id" />  <!-- Sends the recipe ID back to the controller so controller knows what is recipe is being rated -->
                  <div class="rating-group flex justify-center flex-row-reverse text-5xl md:text-6xl text-center mb-3">
                      @for (int i = 5; i >= 1; i--) //Generate 5 stars 
                      {
                          <input type="radio" id="star-@i" name="rating" value="@i" class="hidden peer" @(Model.IndividualRecipe.UserRating == i ? "checked" : "") required /> //Hidden radio buttons so we know what the user has rated 1-5 
                          <label data-testid="star-rating-@i" for="star-@i" class="peer-checked:text-yellow-400 peer-hover:text-yellow-400 [&:hover~label]:text-yellow-400 text-gray-700 cursor-pointer transition-colors duration-150">&#9733;</label> //Formatting for stars, gray normally but when clicked turn yellow
                      }
                  </div>
                  
                  <button data-testid="rating-submit-button" type="submit" id="submitRatingBtn" class="bg-orange-700 text-white px-4 py-2 rounded hover:bg-amber-400 hover:text-white transition mb-4 mt-2">Submit Rating</button>
              </form> 
      
      <!--add a comment -->
      <div class="flex-col h-70 min-screen bg-white rounded-b-lg rounded-xl w-full px-4 py-2 shadow-[0_0_15px_rgba(15,118,110,0.3)] mt-3 ">
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="bg-red-100 border-l-4  text-red-800 px-4 py-2 rounded-lg mb-3">
                        @TempData["ErrorMessage"]
                    </div>
                }

            
            <h2 class="text-lg font-semibold mb-2 py-2">Add a comment</h2>
            <form method="post" asp-route="commentingOnRecipe" asp-route-recipeId="@Model.IndividualRecipe.Id">
            @Html.AntiForgeryToken()
                <textarea name="content" required maxlength = "300"
                    class="w-full resize-none border p-1 rounded-xl focus:outline-none focus:border-orange-500 focus:ring-2, focus:ring-opacity-25 transition-shadow duration-200" oninput="autoResize(this)"
                    name="Content" placeholder="Comment here!"></textarea>
                <div class="flex-direction justify-between items-center mt-0">
                    <button data-testid="comment-submit" type="submit"
                        class=" bg-orange-700 text-white text-sm font-medium px-3 py-1 rounded-xl hover:bg-yellow-500">
                        Submit
                    </button>
                </div>
            </form>
        </div>
    <!--stretches the add a comment box to suit how much content is in the box-->
    <script>
  function autoResize(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
  }
</script>
    <!--displays the number of comments -->
    <div class="text-left p-4">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">
            Comments (@Model.CommentsList.Count())
        </h3>
    </div>
<!--displays all comments -->
<div class="mx-auto max-w max-h-100 bg-orange-100 border-l-4 border-orange-700 rounded-xl mb-4">


    @if (Model.CommentsList.Any())
    {
        <div class=" px-4 py-2">
            @foreach (var i in Model.CommentsList)
            {
              <div class="min-w-0 flex-1">
              <div class="p-3 tracking-wide mb-1 border-b-2 border-orange-700">
                <p class="font-bold text-left leading-relaxed text-gray-800 dark:text-gray-200 break-words">
                  @i.userName
                </p>
                <p class="text-left text-sm leading-relaxed text-gray-800 dark:text-gray-200 break-words">
                  @i.Content
                </p>
                <time class="text-right mt-1 block text-xs text-gray-500 dark:text-gray-400">
                  @i.CreatedOn.ToString("ddd d MMM yyyy, HH:mm")
                </time>
              </div>
            </div>
      
            }
        </div>
    }
    else
    {
        <div class="p-4 text-center text-gray-500 dark:text-gray-400">
            No comments yet — be the first to comment!
        </div>
    }
</div>
  


  </body>

  <!-- Hide scrollbar utility -->
<style>
.scrollbar-hidden {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;     /* Firefox */
}

.scrollbar-hidden::-webkit-scrollbar {
  display: none;             /* Chrome, Safari, Opera */
}

/* Only used when scrollable */
.scrollbar-visible:hover {
  -ms-overflow-style: auto;
  scrollbar-width: thin;
}

.scrollbar-visible:hover::-webkit-scrollbar {
  display: block;
  width: 4px;       /* Adjust thickness */
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(window.location.search);
    if (params.get('scroll') === 'rating') {
      const el = document.getElementById('rating-anchor');
      if (el) {
        const y = el.getBoundingClientRect().top + window.pageYOffset - 50; // adjust offset (100px here)
        window.scrollTo({ top: y, behavior: 'smooth' });
      }
    }
  });
</script>