@model SueChef.ViewModels.IndividualRecipePageViewModel
  <body class="bg-orange-50 text-gray-700">
    <main class="max-w-3xl mx-auto p-6 space-y-8">
      <!-- Header card containing image and title -->
      <header class="text-center space-y-2">
        <img src="@Model.IndividualRecipe.RecipePicturePath" alt="" class="w-full max-h-96 object-cover rounded-lg shadow md:w-[75%] md:mx-auto"/>
        <!-- <div class="border border-orange-700 w-[75%] mx-auto my-auto rounded-lg items-center">  -->
            <h1 class="text-3xl font-bold mt-4">@Model.IndividualRecipe.Title</h1>
            <h2 class="text-lg text-gray-700">By @Model.IndividualRecipe.ChefName</h2>
        <!-- </div> -->
        </header>

            <!-- Recipe Specific details  -->

      <section class="border-l-4 border-orange-700 bg-orange-100 p-4 rounded-lg shadow flex flex-wrap justify-between text-sm ">
        <div><strong>Serves:</strong><input type="number" id="serving" name="serving" min="1" max="12" value="4" class="text-center border border-orange-400 rounded-lg bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:border-orange-400 appearance-none"/></div>
        <div><strong>Difficulty:</strong> @Model.IndividualRecipe.DifficultyLevel</div>
        <div><strong>Rating:</strong> *****</div>
        <div><strong>Prep Time:</strong> @Model.IndividualRecipe.PrepTime minutes</div>
        <div><strong>Cook Time:</strong> @Model.IndividualRecipe.CookTime minutes </div>
      </section>

            <!-- Add to plan / Select Plan placeholders -->

      <section class="bg-orange-100 border-l-4 border-orange-700 p-4 rounded shadow">
        <p class="font-medium">Add to Meal Plan</p>
        <button class="mt-2 bg-orange-700 text-white px-4 py-2 rounded hover:bg-amber-400 hover:text-white transition">
          Add to Plan
        </button>
        <button class="mt-2 bg-orange-700 text-white px-4 py-2 rounded hover:bg-amber-400 hover:text-white transition">
          Select Plan
        </button>
      </section>
            <!-- Recipe Description -->

      <section class="leading-relaxed text-gray-700">
        <p>
        @Model.IndividualRecipe.Description
        </p>
      </section>
              
            <!-- Toggle buttons for ingredients and nutrition -->

      <section class="border-l-4 border-orange-700 bg-orange-100 p-4 rounded-lg shadow">
        <div class="inline-flex w-full rounded-lg overflow-hidden border-2 border-orange-700 mb-3">
          <button id="ingredientsButton" class="flex-1 py-2 bg-orange-700 text-white font-semibold ">Ingredients</button>
          <button id="nutritionButton" class="flex-1 py-2 bg-orange-100 text-orange-700 font-semibold border-l-2 border-orange-800">Nutrition</button>
        </div>
          
          <div id = "ingredientsToggle">       <!-- Displayed by default -->
          @foreach(var i in Model.IndividualRecipe.Ingredients)
          {
                <p class="p-2 mb-1 border-t-2 border-orange-700 italic ingredient" data-base-quantity="@i.Quantity" data-unit="@i.Unit"><span class="ingredient-quantity">@i.Quantity</span>@i.Unit @i.Name </p> 
          }
          </div>
          <div id="nutritionToggle" style="display:none">       <!-- Hidden until toggled-->
              <p class="p-2 mb-1 border-t-2 border-orange-700 italic">Calories per Serving: <span id="caloriesPerServing">@Model.IndividualRecipe.CaloriesPerServing.ToString("0.00") Kcal</span></p>
              <p class="p-2 mb-1 border-t-2 border-orange-700 italic">Protein per Serving: <span id="proteinPerServing">@Model.IndividualRecipe.ProteinPerServing.ToString("0.0")g</span></p>
              <p class="p-2 mb-1 border-t-2 border-orange-700 italic">Carbs per Serving: <span id="carbsPerServing">@Model.IndividualRecipe.CarbsPerServing.ToString("0.0")g</span></p>
              <p class="p-2 mb-1 border-t-2 border-orange-700 italic">Fats per Serving: <span id="fatsPerServing">@Model.IndividualRecipe.FatsPerServing.ToString("0.0")g</span></p>
          </div>
      </section>
              <!-- Logic to split the method and change it into step: 1, etc. -->

      @{
        var method = Model.IndividualRecipe.Method;
        var steps = method.Split(new[] {"; "}, StringSplitOptions.RemoveEmptyEntries);
        var counter = 1;
      }
      <section>
        <h2 class="text-xl font-semibold mb-2">Method</h2>
        <ul class="list-decimal list-inside space-y-2 leading-relaxed text-gray-700">
        @foreach(var step in steps)
        { 
          <p class="">Step @counter: @step.Trim()</p>
          counter++;
        }
        </ul>
      </section>
            <!-- Rate this recipe placeholder -->

      <div class="text-center p-4 border-t">
        <h2 class="text-xl font-semibold mb-2">Rate this recipe</h2>
        <div class="text-yellow-400 text-4xl sm:text-5xl md:text-6xl text-center mb-3"> <!-- New stars???? -->
          &#9733;&#9733;&#9733;&#9733;&#9733;
        </div>


 <!-- Chefs hats? Spoons? -->
      </div>

    </main>
  </body>
</html>

<script>
  //Saving all the IDs to variables so it knows where to go
    const ingredientsBtn = document.getElementById('ingredientsButton');
    const nutritionBtn = document.getElementById('nutritionButton');
    const ingredientsTab = document.getElementById('ingredientsToggle');
    const nutritionTab = document.getElementById('nutritionToggle');
    const servingInput = document.getElementById('serving');
    const baseServings = 4; 
    const ingredientEls = Array.from(document.querySelectorAll('.ingredient')); //Creates an array of ingredient elements 

    servingInput.addEventListener('input', () => { //When input changes execute the following
      const servings = parseFloat(servingInput.value) || baseServings; //Turns the value into a float and defaults to base servings if not filled in. 

      ingredientEls.forEach(el => { //Logic to take the quantity and multiply it by the servings, to scale 
          const baseQty = parseFloat(el.dataset.baseQuantity);
          const newQty = baseQty * servings;
          el.querySelector('.ingredient-quantity').textContent = newQty; //Find the .ingredient-quantity class and update it to the new amount 
      });
    });


    // JS waiting for the button to be clicked 
    ingredientsBtn.addEventListener('click', () => {
        ingredientsTab.style.display = 'block'; //Logic so when its clicked it either hides or shows. 
        nutritionTab.style.display = 'none';

        // Logic so that when clicked it is adding or removing styling based on whats active 
        ingredientsBtn.classList.add('bg-orange-700', 'text-white');
        ingredientsBtn.classList.remove('bg-orange-100', 'text-orange-700');

        // This resets the othe button - Logic repeats below so it goes both ways 
        nutritionBtn.classList.remove('bg-orange-700', 'text-white');
        nutritionBtn.classList.add('bg-orange-100', 'text-orange-700');
    });

    nutritionBtn.addEventListener('click', () => {
        ingredientsTab.style.display = 'none';
        nutritionTab.style.display = 'block';
        nutritionBtn.classList.add('bg-orange-700', 'text-white');
        nutritionBtn.classList.remove('bg-orange-100', 'text-orange-700');
        ingredientsBtn.classList.remove('bg-orange-700', 'text-white');
        ingredientsBtn.classList.add('bg-orange-100', 'text-orange-700');
        //see above notes if unsure 
    });
</script>

