@using SueChef.ViewModels
<!-- VIEW FOR SINGLE MEAL PLANS -->
@model SingleMealPlanPageViewModel

<body class='bg-orange-50 min-h-screen flex flex-col'></body>
<div class="flex-1 justify-center p-3 mt-1">
    <!-- Main central container -->
    <div class="w-full max-w-4xl mx-auto">
        <!-- Container for Success Messages: -->
        <div>
            @if (TempData["SuccessMessage"] != null)
            {
                <div
                    class="alert alert-success flex items-center justify-center bg-green-100 border-l-4 border-green-600 text-green-800 p-4 rounded-md shadow mb-6">
                    <svg class="w-6 h-6 mr-2 text-green-600" fill="none" stroke="currentColor" stroke-width="2"
                        viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="font-medium">@TempData["SuccessMessage"]</span>
                    @if (TempData["DeletedRecipeId"] != null)
                    {
                        <a asp-action="UndoDeleteRecipe" asp-route-id="@TempData["DeletedRecipeId"]" class="alert-link">
                            <button
                                class="bg-orange-600 text-white text-sm font-medium w-36 px-4 py-2 rounded-md hover:bg-orange-400 m-2">
                                Undo
                            </button>
                        </a>
                    }
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }
        </div>

        <section class="text-center mb-8">
        <div class="flex items-center justify-center gap-3 mb-4">
            <!-- Back Home Button -->
            <a asp-controller="MealPlan" asp-action="Index"
            class="flex items-center justify-center w-9 h-9 rounded-full bg-orange-700 hover:bg-orange-600 transition shadow-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <path d="M15 18l-6-6 6-6"/>
                </svg>
            </a>

            <!-- Meal Plan Title -->
            <h2 class="text-2xl font-semibold text-gray-800 tracking-tight">
                @Model.MealPlan.MealPlanTitle - Recipes
            </h2>
        </div>

            <!-- Action Buttons -->
            <div class="flex flex-row justify-center items-center gap-1 mb-6">
                <form asp-controller="ShoppingList" asp-action="Generate" method="post" class="flex-1">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="MealPlanId" value="@Model.MealPlan.Id" />
                    <div class="flex flex-col sm:flex-row justify-center items-center gap-3 sm:gap-1 mb-6 px-3">
                        <button type="submit" class="relative group w-[85%] sm:w-64 h-11 bg-orange-700 text-md text-white font-semibold tracking-wide rounded-lg shadow-lg hover:shadow-lg transition-all duration-300 ease-out">
                        <span class="flex ml-3 items-center justify-start gap-2">
                            Generate Shopping List
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="sm:ml-2 ml-14 w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2" />
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9 2h6a1 1 0 011 1v2a1 1 0 01-1 1H9a1 1 0 01-1-1V3a1 1 0 011-1z" />
                            </svg>
                        </span>
                    </button>
                            <div class="flex flex-row sm:flex-row items-center justify-start gap-2 w-[85%] sm:w-64 bg-orange-700 rounded-lg shadow-lg hover:shadow-md transition-all duration-300 h-11">
                    <div class="bg-orange-700 mr-12 sm:mr-0 text-white font-semibold text-md px-3 text-left sm:text-left">Adjust Servings</div>
                    <div class="flex items-center justify-end bg-orange-700 rounded-md p-1 ml-6 sm:ml-0">
                        <button type="button" class="px-2 py-1 text-white font-bold text-md transition" onclick="adjustServingsOverall(-1)">âˆ’</button>
                        <input type="number" id="serving-overall" name="ServingsOverall" min="1" max="12" value="4" class="no-spin w-10 text-center text-white bg-transparent border-none focus:ring-0 text-md font-semibold" />
                        <button type="button" class="px-2 py-1 text-white font-bold text-md transition" onclick="adjustServingsOverall(1)">+</button>
                    </div>
                </div>
                    </div>
            @if (Model.RecipesList == null || !Model.RecipesList.Any())
            {
                <div class="flex flex-col items-center justify-center bg-white border border-orange-300 text-orange-800 rounded-xl p-6 shadow-sm mt-6">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-10 h-10 text-orange-600 mb-3">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <h3 class="text-xl text-orange-600 font-semibold mb-2">Your meal plan is empty!</h3>
                    <p class="text-sm text-orange-600 mb-4">Add some recipes before generating your shopping list.</p>
                </div>
            }

            else{
                <button type="submit" hidden
                    class="h-8 w-18 bg-red-500 hover:bg-red-600 text-white text-xs font-medium py-1 px-3 rounded-md shadow-md leading-none">
                    Remove
                </button>
                    <!-- Recipe Cards  -->
                    <section class="max-w-6xl mx-auto px-5">
                        @foreach (SueChef.ViewModels.RecipeCardViewModel recipe in Model.RecipesList)
                        {   
                            <button hidden type="submit"></button> 
                            <partial name="_MealPlanRecipeCardPartial" model="recipe" />
                        }
                    </section>
                }
                </form>
            </div>
        </section>

        <!-- Shopping List Partial Work In Progress! -->
        <a id="shopping-list-anchor"></a>
        
        <form asp-controller="ShoppingList" asp-action="Save" class="flex justify-center w-full max-w-4xl mx-auto">
        @Html.AntiForgeryToken()
            <partial name="_ShoppingListPartial" model="Model.ShoppingList" />
        </form>
        
    </div>
</div>

<script>
    //Short script to make the alert messages fade away after a few seconds
    setTimeout(() => {
        document.querySelectorAll('.alert').forEach(el => {
            el.style.transition = 'opacity 1s ease';
            el.style.opacity = '0';
            setTimeout(() => el.remove(), 1000);
        });
    }, 4000);
</script>

<script>
    // Toggle Crossed out Thingy when clicked
    document.querySelectorAll('.ingredient-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', (e) => {
            const label = e.target.nextElementSibling;
            if (e.target.checked) {
                label.classList.add('line-through', 'text-gray-400');
            } else {
                label.classList.remove('line-through', 'text-gray-400');
            }
        });
    });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(window.location.search);
    if (params.get('scroll') === 'shopping') {
      const el = document.getElementById('shopping-list-anchor');
      if (el) {
        const y = el.getBoundingClientRect().top + window.pageYOffset - 80; // adjust offset as needed
        window.scrollTo({ top: y, behavior: 'smooth' });
      }
    }
  });
</script>

<script>
function adjustServingsOverall(delta) {
    // Get the overall input element
    const overallInput = document.getElementById('serving-overall');
    const currentOverall = parseInt(overallInput.value) || 1;
    const newOverall = Math.min(Math.max(currentOverall + delta, overallInput.min), overallInput.max);
    
    overallInput.value = newOverall;

    // Now update all individual serving inputs to match the new overall value
    const cardInputs = document.querySelectorAll('input[id^="serving-"]'); 
    cardInputs.forEach(input => {
        input.value = newOverall;
    });
}
</script>


<script>
async function removeRecipe(mealPlanRecipeId) {
    if (!confirm('Are you sure you want to delete this recipe?')) return;

    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    try {
        const response = await fetch(`/MealPlans/DeleteRecipe/${mealPlanRecipeId}`, {
            method: 'POST',
            headers: {
                'RequestVerificationToken': token
            }
        });

        if (response.ok) {
            // Option 1: reload the page to refresh the list
            location.reload();
        } else {
            // Option 2: show an error if the request failed
            alert('Failed to remove recipe. Please try again.');
        }
    } catch (err) {
        console.error(err);
        alert('An error occurred while deleting the recipe.');
    }
}
</script>




<script>
    function adjustServings(id, delta) {
        const input = document.getElementById(`serving-${id}`);
        const current = parseInt(input.value) || 1;
        const newValue = Math.min(Math.max(current + delta, input.min), input.max);
        input.value = newValue;
    }
</script>