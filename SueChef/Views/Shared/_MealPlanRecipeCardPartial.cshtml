@model SueChef.ViewModels.RecipeCardViewModel

<div class="flex justify-center pb-5">
    <div
        class="hover:shadow-xl w-full max-w-6xl bg-white rounded-md overflow-hidden transition-all duration-300 border-2 border-gray-200 p-3 md:p-6 h-full">
        <a asp-controller="RecipeDetails" asp-action="Index" asp-route-id="@Model.Id"
            class="block transition-all duration-300 h-full">

            <div class="flex md:items-start gap-3 h-full">
                <!-- Left side: picture -->
                <div class="w-32 h-32 md:w-48 md:h-48 lg:w-56 flex-shrink-0">
                    <img src="@Model.RecipePicturePath" alt="@Model.Title" title="@Model.Title"
                        class="w-full h-full md:h-full lg:h-full object-cover rounded-md" />
                </div>

                <!-- Right side: text -->
                <div class="flex flex-col md:w-[65%] flex-grow h-full">

                    <!-- Recipe Title -->
                    <div class="flex flex-col sm:flex-row justify-between items-start md:items-center gap-3">
                        <h3
                            class="text-left text-lg text-gray-700 md:text-xl lg:text-xl font-medium hover:text-orange-800 transition flex-1 mr-3 leading-tight line-clamp-2">
                            @Model.Title
                        </h3>
        </a>
            <div class="mb-1 flex flex-wrap items-center gap-2 md:justify-end order-2 md:order-1 w-[90%] md:w-auto ">
                <div class="w-18 flex h-8 items-center border border-orange-400 rounded-lg overflow-hidden bg-orange-50">
                    <button type="button" class="px-1 py-1 text-orange-700 hover:bg-orange-200"
                        onclick="adjustServings('@Model.Id', -1)">âˆ’</button>

                    <input type="number" data-testid="serving-input-@Model.Id" id="serving-@Model.Id" name="Servings"
                        min="1" max="12" value="4" class="no-spin w-8 text-center bg-orange-50 focus:outline-none
                                            focus:ring-2 focus:ring-orange-400 focus:border-orange-400 border-0" />

                    <button type="button" class="px-1 py-1 text-orange-700 hover:bg-orange-200"
                        onclick="adjustServings('@Model.Id', 1)">+</button>

                </div>

                <p class="text-gray-700">servings</p>
                <input type="hidden" data-testid="recipe-@Model.Id" id="recipe-@Model.Id" name="RecipeIds"
                    value="@Model.Id" />
            <!-- Servings control -->

        <div class="flex flex-row items-center">

            <!-- Delete button -->
            <button type="button"
                    onclick="removeRecipe('@Model.MealPlanRecipeId')"
                    class="h-8 w-18 bg-red-600 hover:bg-red-700 text-white text-xs font-medium py-1 px-3 rounded-md shadow-md leading-none">
                Remove
            </button>
            </div>
        </div>
    </div>

    <!-- Stars -->
    <div class="hidden sm:flex items-center gap-1 mb-1 mt-1 text-yellow-400">
        @{
            double avg = Model.AverageRating ?? 0;
            int fullStars = (int)Math.Floor(avg);
            bool hasHalfStar = (avg - fullStars) >= 0.5;
        }

        @for (int i = 1; i <= 5; i++)
        {
            if (i <= fullStars)
            {
                <!-- full star -->
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 fill-yellow-400 stroke-yellow-400" viewBox="0 0 24 24">
                    <path
                        d="M12 .587l3.668 7.431L24 9.751l-6 5.848 1.416 8.264L12 19.771l-7.416 4.092L6 15.599 0 9.751l8.332-1.733z" />
                </svg>
            }
            else if (i == fullStars + 1 && hasHalfStar)
            {
                <!-- half star -->
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 fill-yellow-400 stroke-yellow-400" viewBox="0 0 24 24">
                    <defs>
                        <linearGradient id="half">
                            <stop offset="50%" stop-color="currentColor" />
                            <stop offset="50%" stop-color="transparent" />
                        </linearGradient>
                    </defs>
                    <path fill="url(#half)" stroke="currentColor"
                        d="M12 .587l3.668 7.431L24 9.751l-6 5.848 1.416 8.264L12 19.771l-7.416 4.092L6 15.599 0 9.751l8.332-1.733z" />
                </svg>
            }
            else
            {
                <!-- empty star -->
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 stroke-yellow-400" fill="none" viewBox="0 0 24 24"
                    stroke-width="2">
                    <path
                        d="M12 .587l3.668 7.431L24 9.751l-6 5.848 1.416 8.264L12 19.771l-7.416 4.092L6 15.599 0 9.751l8.332-1.733z" />
                </svg>
            }
        }

        @{
            string ratingText = $"{Model.RatingCount} rating{(Model.RatingCount != 1 ? "s" : "")}";
        }
        <div class="flex items-center text-gray-700 md:text-xl lg:text-lg ml-4">
            @ratingText
        </div>
    </div>

    <!-- Description -->
    <p class="recipe-card__description text-gray-600 line-clamp-2 break-words tracking-tight text-sm mt-1 hidden sm:flex text-left pb-5">
        @Model.Description
    </p>

    <div class="flex-grow"></div>

    <!-- Tags bar -->
    <div class="hidden sm:flex rounded-md justify-around items-center text-center gap-4 mt-1 md:mt-2">
        <!-- Category -->
        <div class="flex flex-col items-center w-1/4">
            <i data-lucide="clock" class="w-6 h-6 text-gray-500"></i>
            <span class="text-xs md:text-sm lg:text-md text-gray-500 truncate">@Model.TotalTimeDisplay</span>
        </div>

        <!-- Difficulty -->
        <div class="flex flex-col items-center w-1/4">
            <i data-lucide="chef-hat" class="w-6 h-6 text-gray-500"></i>
            <span
                class="text-xs font-medium
                    @(Model.DifficultyLevel == 1
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ? "text-green-600 md:text-sm lg:text-md"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        : Model.DifficultyLevel == 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ? "text-orange-500 md:text-sm lg:text-md"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        : "text-red-600 md:text-sm lg:text-md")">
                @(Model.DifficultyLevel == 1 ? "Easy" :
                                Model.DifficultyLevel == 2 ? "Medium" : "Hard")
            </span>
        </div>
        <!-- Dairy Free -->
        @if (Model.IsDairyFree)
        {
            <div class="flex flex-col items-center w-1/4">
                <i data-lucide="milk-off" class="w-6 h-6 text-gray-500"></i>
                <span class="text-xs md:text-sm lg:text-md text-gray-500 truncate">Dairy Free</span>
            </div>
        }
        <!-- Vegetarian -->
        @if (Model.IsVegetarian)
        {
            <div class="flex flex-col items-center w-1/4">
                <i data-lucide="vegan" class="w-6 h-6 text-gray-500"></i>
                <span class="text-xs md:text-sm lg:text-md text-gray-500 truncate">Vegetarian</span>
            </div>
        }

    </div>
</div>
</div>
</div>
</div>

<script>
    function adjustServings(id, delta) {
        const input = document.getElementById(`serving-${id}`);
        const current = parseInt(input.value) || 1;
        const newValue = Math.min(Math.max(current + delta, input.min), input.max);
        input.value = newValue;
    }
</script>